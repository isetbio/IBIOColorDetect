function generateMosaicForBLIllumination()

    mosaicFOV = 1.1;
    integrationTime = 50/1000;
    resamplingFactor = 7;
    
    c = coneMosaicHex(7);
    
    
    if (1==2)
        coneMosaic = coneMosaicHex(resamplingFactor, ...
            'fovDegs', mosaicFOV*[1 1], ...
            'wave', SToWls([380 8 51]), ...
            'integrationTime', integrationTime, ...
            'eccBasedConeDensity', true, ...
            'eccBasedConeQuantalEfficiency', true, ...
            'maxGridAdjustmentIterations', 7000);

        % Custom dark noise
        coneMosaic.coneDarkNoiseRate = [100 100 100];
        coneMosaic.visualizeGrid();
        save('coneMosaic1.1degs.mat', 'coneMosaic');
    else
        load('coneMosaic1.1degs.mat', 'coneMosaic');
        coneMosaic.visualizeGrid();
    end
    coneMosaic.displayInfo()
    coneMosaic.integrationTime
    
    figure(1);
    clf;
    plot(c.wave, c.qe(:,1), 'rd-', 'LineWidth', 2);
    hold on
    plot(c.wave, c.qe(:,2), 'gd-', 'LineWidth', 2);
    plot(c.wave, c.qe(:,3), 'bd-', 'LineWidth', 2);
    
    plot(coneMosaic.wave, coneMosaic.qe(:,1), 'ko-');
    hold on
    plot(coneMosaic.wave, coneMosaic.qe(:,2), 'ms-');
    plot(coneMosaic.wave, coneMosaic.qe(:,3), 'co-');
    
    coneMosaic.eccBasedConeQuantalEfficiency = false;
    isomerizationsWithDarkNoise = testMosaic(coneMosaic, false);
    isomerizationsWithoutDarkNoise = testMosaic(coneMosaic, true);
    
    coneMosaic.visualizeGrid();

    signalRange(1) = min(...
        [...
            min(isomerizationsWithDarkNoise(:)) 
            min(isomerizationsWithoutDarkNoise(:))...
        ]...
    );
    signalRange(2) = max([max(isomerizationsWithDarkNoise(:)) max(isomerizationsWithoutDarkNoise(:))]);
    
    showColorBar = true;
    labelColorBarTicks = true;
    xRange = [];
    yRange = [];
    backgroundColor = [0 0 0];
    figure(2); clf;
    ax = subplot('Position', [0.02 0.05 0.28 0.9]);
    coneMosaic.renderActivationMap(ax, isomerizationsWithoutDarkNoise, ...
             'signalRange', signalRange, ...
             'visualizedConeAperture', 'geometricArea', ...
             'mapType', 'modulated disks', ...
             'showColorBar', showColorBar, ...
             'labelColorBarTicks', labelColorBarTicks, ...
             'xRange', xRange, ...
             'yRange', yRange, ...
             'showXLabel', false, ...
             'showYLabel', false, ...
             'colorMap', gray(1024), ...
             'backgroundColor', backgroundColor);
    title('dark noise rate: [0 0 0] R*/sec');     
    
    ax = subplot('Position', [0.36 0.05 0.28 0.9]);
    coneMosaic.renderActivationMap(ax, isomerizationsWithDarkNoise, ...
             'signalRange', signalRange, ...
             'visualizedConeAperture', 'geometricArea', ...
             'mapType', 'modulated disks', ...
             'showColorBar', showColorBar, ...
             'labelColorBarTicks', labelColorBarTicks, ...
             'xRange', xRange, ...
             'yRange', yRange, ...
             'showXLabel', false, ...
             'showYLabel', false, ...
             'colorMap', gray(1024), ...
             'backgroundColor', backgroundColor);
    title('dark noise rate: [100 100 100] R*/sec');     
    
    signalRange = [-10 10];
    cmap = brewermap(1000, '*RdBu')
    ax = subplot('Position', [0.7 0.05 0.28 0.9]);
    coneMosaic.renderActivationMap(ax, isomerizationsWithDarkNoise - isomerizationsWithoutDarkNoise, ...
             'signalRange', signalRange, ...
             'visualizedConeAperture', 'geometricArea', ...
             'mapType', 'modulated disks', ...
             'showColorBar', showColorBar, ...
             'labelColorBarTicks', labelColorBarTicks, ...
             'xRange', xRange, ...
             'yRange', yRange, ...
             'showXLabel', false, ...
             'showYLabel', false, ...
             'colorMap', cmap, ...
             'backgroundColor', backgroundColor);
    title('diff');   
    
end

function isomerizations = testMosaic(coneMosaic, darkNoiseOff)
    scene = sceneCreate('uniform ee');
    scene = sceneSet(scene,'fov',1.5);
    scene = sceneAdjustLuminance(scene,17);

    opticsModel = 'human';
    pupilDiamMM = 6;
    oi = oiCreate(opticsModel, pupilDiamMM);
    oi = oiCompute(oi,scene);

    if (darkNoiseOff)
        coneMosaic.coneDarkNoiseRate = [0 0 0];
    end
    
    trialsNum = 100;
    for k = 1:trialsNum
        r = coneMosaic.compute(oi);
        if (k == 1)
            isomerizations = zeros(size(r,1), size(r,2), trialsNum);
        end
        isomerizations(:,:,k) = r;
    end
    isomerizations = mean(isomerizations, 3);
end
