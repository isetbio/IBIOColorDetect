function validationData = t_plotDetectThresholds(varargin)
% Plot Weibull fit of psychometric functions for color direction thresholds
%
% Syntax:
%   validationData = t_plotDetectThresholds([varargin])
%
% Description:
%    Read classification performance data generated by
%      t_colorDetectFindPerformance
%
%    Plot the psychometric functions with a fit Weibull, which is used to
%    find the threshold in each color direction.
%
% Inputs:
%    None required.
%
% Outputs:
%    validationData   - Struct. A validation data structure.
%
% Optional key/value pairs:
%    rParams          - Struct. The rParams structure to use. Default is
%                       empty, which will then use defaults produced by a
%                       generation function.
%    instanceParams   - Struct. The instanceParams structure to use.
%                       Default is empty, which will then use defaults
%                       produced by a generation function.
%    thresholdParams  - Struct. The thresholdParams structure to use.
%                       Default isempty, which will then use defaults
%                       produced by a generation function.
%    setRngSeed       - Boolean. Whether to set the rng seed to a value so
%                       that the output is reproducible. Default true.
%    generatePlots    - Boolean. Whether to make the plots. Default true.
%    plotPsychometric - Boolean. Whether to produce psychometric function
%                       output graphs. Default true.
%    delete           - Boolean. Whether to delete the output files. Not
%                       yet implemented. Default false.


%% Parse input
p = inputParser;
p.addParameter('rParams', [], @isemptyorstruct);
p.addParameter('instanceParams', [], @isemptyorstruct);
p.addParameter('thresholdParams', [], @isemptyorstruct);
p.addParameter('freezeNoise', true, @islogical);
p.addParameter('generatePlots', true, @islogical);
p.addParameter('plotPsychometric', true, @islogical);
p.addParameter('delete', false', @islogical);
p.parse(varargin{:});
rParams = p.Results.rParams;
instanceParams = p.Results.instanceParams;
thresholdParams = p.Results.thresholdParams;

%% Clear
if (nargin == 0)
    ieInit;
    close all;
end

%% Get the parameters we need
%
if (isempty(rParams))
    rParams = responseParamsGenerate;

    % Override some defult parameters
    %    Set duration equal to sampling interval to do just one frame.
    rParams.temporalParams.simulationTimeStepSecs = 200 / 1000;
    rParams.temporalParams.stimulusDurationInSeconds = 200 / 1000;
    rParams.temporalParams.stimulusSamplingIntervalInSeconds = ...
        rParams.temporalParams.stimulusDurationInSeconds;
    rParams.temporalParams.secondsToInclude = ...
        rParams.temporalParams.stimulusDurationInSeconds;

    % No eye movements
    rParams.temporalParams.emPathType = 'none';

    rParams.mosaicParams.integrationTimeInSeconds = ...
        rParams.temporalParams.stimulusDurationInSeconds;
    % Iso. Noise - Type coneMosaic.validNoiseFlags to get valid values
    rParams.mosaicParams.isomerizationNoise = 'random';
    % OS Noise - Type outerSegment.validNoiseFlags to get valid values
    rParams.mosaicParams.osNoise = 'random';
    rParams.mosaicParams.osModel = 'Linear';
end

% Fix random number generator so we can validate output exactly
if (p.Results.freezeNoise)
     rng(1);
     if (strcmp(rParams.mosaicParams.isomerizationNoise, 'random'))
         rParams.mosaicParams.isomerizationNoise = 'frozen';
     end
     if (strcmp(rParams.mosaicParams.osNoise, 'random'))
         rParams.mosaicParams.osNoise = 'frozen';
     end
end

% Default
if (isempty(instanceParams)), instanceParams = instanceParamsGenerate; end

%% Parameters related to how we find thresholds from responses
if (isempty(thresholdParams))
    thresholdParams = thresholdParamsGenerate;
end

%% Set up the rw object for this program
paramsList = {rParams.topLevelDirParams, rParams.mosaicParams, ...
    rParams.oiParams, rParams.spatialParams, rParams.temporalParams, ...
    rParams.backgroundParams, instanceParams, thresholdParams};
rwObject = IBIOColorDetectReadWriteBasic;
writeProgram = 't_fitPsychometricFunctions';

%% Fit the psychometric functions to get thresholds
psychoData = t_fitPsychometricFunctions('rParams', rParams, ...
    'instanceParams', instanceParams, ...
    'thresholdParams', thresholdParams, ...
    'freezeNoise', p.Results.freezeNoise, 'generatePlots', false, ...
    'delete', p.Results.delete);

if (p.Results.plotPsychometric)
    hFig = figure; hold on
    set(gca, 'FontSize', rParams.plotParams.axisFontSize);
    errorbar(log10(psychoData.testContrasts), ...
        psychoData.thePerformance, psychoData.theStandardError, 'ro', ...
        'MarkerSize', rParams.plotParams.markerSize, ...
        'MarkerFaceColor', [1.0 0.5 0.50]);
    plot(log10(psychoData.fitContrasts), psychoData.fitFractionCorrect, ...
        'r', 'LineWidth', 2.0);
    for kk = 1:numel(psychoData.thresholdContrasts)
        plot(log10(psychoData.thresholdContrasts(kk)) * [1 1], ...
            [0 thresholdParams.criterionFraction], 'b', 'LineWidth', 2.0);
    end
    axis 'square'
    set(gca, 'YLim', [0 1.0], ...
        'XLim', log10([psychoData.testContrasts(1), ...
        psychoData.testContrasts(end)]), 'FontSize', 14);
    xlabel('contrast', 'FontSize' , rParams.plotParams.labelFontSize, ...
        'FontWeight', 'bold');
    ylabel('percent correct', ...
        'FontSize' , rParams.plotParams.labelFontSize, ...
        'FontWeight', 'bold');
    box off;
    grid on
    pedestalLuminance = rParams.backgroundParams.lumFactor * ...
        rParams.backgroundParams.backgroundxyY(3);
    title(sprintf(['pedestal luminance: %2.1f cd/m2\nthreshold ', ...
        'contrast: %g\n'], pedestalLuminance, ...
        psychoData.thresholdContrasts), ...
        'FontSize', rParams.plotParams.titleFontSize);
    rwObject.write('PsychoFunction', hFig, paramsList, writeProgram, ...
        'Type', 'figure');
end

%% Validation data
if (nargout > 0)
    validationData.testContrasts = psychoData.testContrasts;
    validationData.thresholdContrasts = psychoData.thresholdContrasts;
    validationData.fitContrasts = psychoData.fitContrasts;
    validationData.fitFractionCorrect = psychoData.fitFractionCorrect;
end

end
