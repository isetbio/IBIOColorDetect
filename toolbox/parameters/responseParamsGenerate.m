function params = responseParamsGenerate(varargin)
% params = responseParamsGenerate(varargin)
%
% This specifies the parameter structure for generating
% responses in the form expected by other programs in this project.  It
% provides reasonable illustrative defaults, although in real calculations
% it would be natural to vary many of these parameters.
%
% This returns a struct of structs, with each substruct generated by its
% own function.  See the help functions for the individual routines for what
% fields get set.  This routine, however, coordinates some fields across the
% various structs (e.g., field of view).
%
% Key/value pairs
%   'spatialType' - String (default 'Gabor') Type of spatial pattern
%     'Gabor' - Gabor pattern
%     'spot' - Spatial spot on background
%   'windowType' - String (default 'Gaussian') Type of spatial pattern.
%     May not have an effect for all spatial types.
%     'Gaussian' - Gaussian spatial window (true Gabor)
%     'halfcos' - Half-cosine spatial window
%   'backgroundType' - String (default 'monitor') Type of background
%     'monitor' - Specify properties of a background on a monitor
%     'AO' - Specify parameters of adaptive optics rig background
%   'modulationType' - String (default 'monitor') Type of color modulation
%     'monitor' - Specify properties of a modulatoin on a monitor
%     'AO' - Specify parameters of adaptive optics rig stimulus
%
% See also:
%   spatialParamsGenerate
%   colorModulationParamsGenerate
%   temporalParamsGenerate
%   mosaicParamsGenerate
%   plotParamsGenerate

%% Type field for parameters
params.type = 'ResponseGeneration';
 
%% Define rootDirectory parameters
params.topLevelDirParams = struct(...
    'type', 'TopLevelDir', ...
	'name', 'scratch');

%% Define Gabor spatial parameters
params.spatialParams = spatialParamsGenerate(varargin{:});

%% Define background/CRT params
params.backgroundParams = backgroundParamsGenerate(varargin{:});

%% Define color modulation parameters
params.colorModulationParams = colorModulationParamsGenerate(varargin{:});

%% Parameters related to temporal properties of stimulus and response
params.temporalParams = temporalParamsGenerate(varargin{:});

%% Properties related to computing the retinal image
params.oiParams = oiParamsGenerate(varargin{:});
params.oiParams.fieldOfViewDegs = params.spatialParams.fieldOfViewDegs;

%% Properties of the cone mosaic
params.mosaicParams = mosaicParamsGenerate(varargin{:});
params.mosaicParams.fieldOfViewDegs = params.spatialParams.fieldOfViewDegs;

%% Parameters for plots
params.plotParams = plotParamsGenerate(varargin{:});

%% Check wether the user asked for fastComputeParams and if he/she did
%% overide some of the params above
p = inputParser; p.KeepUnmatched = true;
p.addParameter('fastComputeParams',false,@islogical);
p.parse(varargin{:});
if (p.Results.fastComputeParams)
% Override some parameters to reduce computational time.
% This should only be used for validation scripts
params.spatialParams.fieldOfViewDegs = 1.0;
params.spatialParams.cyclesPerDegree = 8;
params.spatialParams.gaussianFWHMDegs = 0.375;
% Update oiParams accordingly
params.oiParams.fieldOfViewDegs = params.spatialParams.fieldOfViewDegs;
% Set duration equal to sampling interval to do just one frame.
params.temporalParams.stimulusDurationInSeconds = 200/1000;
params.temporalParams.stimulusSamplingIntervalInSeconds = params.temporalParams.stimulusDurationInSeconds;
params.temporalParams.secondsToInclude = params.temporalParams.stimulusDurationInSeconds;
% Mosaic params
params.mosaicParams.integrationTimeInSeconds = params.temporalParams.stimulusDurationInSeconds;
params.mosaicParams.isomerizationNoise = 'frozen';         % Type coneMosaic.validNoiseFlags to get valid values
params.mosaicParams.osNoise = 'frozen';                    % Type outerSegment.validNoiseFlags to get valid values
params.mosaicParams.osModel = 'Linear';
params.mosaicParams.fieldOfViewDegs = params.spatialParams.fieldOfViewDegs;
end


